#!/usr/bin/env sh
# This script is part of Martin V\"ath's archwrap project.
set -u
bro=bro
decompress=
case ${0##*/} in
un*|de*)
	decompress=-d;;
*best*)
	bro=brobest;;
esac
Echo() {
	printf '%s\n' "$*"
}
Msg() {
	Echo "${0##*/}: $*" >&2
}
Warning() {
	Msg "warning: $*"
}
Die() {
	Msg "fatal: $*"
	exit 1
}
PushA_=`push.sh 2>/dev/null` || Die \
"push.sh from https://github.com/vaeth/push (v2.0 or newer) required"
eval "$PushA_"
Usage() {
	Echo "Usage: ${0##*/} [options] [--] file1 file2 ...
Options:
-d --decompress --uncompress decompress instead of compressing
--no-copy-stat               do not copy owner and file permissions
                             (in contrast to bro this honours umask)
-k --keep                    do not remove input file after compression
--rm                         remove input file after compression (default)
--chmod                      chmod to specified mask
--chown                      chown to specified user[:[group]]
-f --force                   override output file if it exists
--custom-dictionary          use specified dictionary
-q --quality                 use specified quality (0-99)
-r --repeat                  use specified number of repetitions (0-99)
-w --window                  use specified logarithmic window size (10-24)
-h --help                    show this help text"
	exit ${1:-1}
}
NeedArg() {
	[ $# -gt 1 ] && return 0
	Msg "option $1 requires an argument"
	exit 2
}
force=false
keep=false
honour_umask=false
chmod=
chown=
Push -c args $decompress
while [ $# -ne 0 ]
do	case $1 in
	--)
		shift
		break;;
	-h|--help)
		Usage 0;;
	-d|--decompress|--uncompress)
		decompress=-d
		Push args "$1"
		shift;;
	-k|--keep)
		keep=:
		shift;;
	--rm)
		keep=false
		shift;;
	--no-copy-stat)
		honour_umask=:
		Push args "$1"
		shift;;
	-f|--force)
		force=:
		Push args "$1"
		shift;;
	--chmod)
		NeedArg "$@"
		chmod=$2
		shift 2;;
	--chown)
		NeedArg "$@"
		chown=$2
		shift 2;;
	--custom-dictionary|-q|--quality|-r|--repeat|-w|--window)
		NeedArg "$@"
		Push args "$1" "$2"
		shift 2;;
	-*)
		Die "unknown option $1";;
	*)
		break;;
	esac
done
if [ $# -eq 0 ]
then	eval "exec \"\$bro\" $args"
	exit
fi
[ -z "$chmod" ] || honour_umask=false
$force || ! $honour_umask || Push args -f
for i
do	test -f "$i" || {
		Warning "ignoring non-file $i"
		continue
	}
	test -r "$i" || {
		Warning "ignoring unreadable $i"
		continue
	}
	if [ -z "$decompress" ]
	then	out=$i.br
	else	out=${i%.br}
		if [ "$out" = "$i" ]
		then	out=${i%.BR}
			[ "$out" != "$i" ] || out=
		fi
		[ -n "$out" ] || {
			Warning "ignoring $i (wrong extension)"
			continue
		}
	fi
	if $honour_umask
	then	if $force
		then	: >|"$out" || Die "cannot create $out"
		else	if test -f "$out" || test -h "$out"
			then	Die "file $out already exists"
			fi
			: >"$out" || Die "cannot create $out"
		fi
	fi
	set -- a $args
	shift
	"$bro" ${1+"$@"} --input "$i" --output "$out" \
		|| Die "failed to compress $i"
	test -f "$out" || Die "failed to generate $out"
	[ -z "$chmod" ] || chmod -- "$chmod" "$out"
	[ -z "$chown" ] || chown -- "$chown" "$out"
	$keep || rm -f -- "$i" || Die "failed to remove $i"
done
